name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build_and_release:
      runs-on: ubuntu-24.04
      permissions:
        contents: write
        packages: write
        id-token: write

      steps:
      - name: Checkout tagged code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Your original dependency check logic
          if [ -f app-service/requirements.txt ]; then
            pip install -r app-service/requirements.txt
          else
            echo "Warning: app-service/requirements.txt not found. Skipping pip install."
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push Docker image
        run: |
          REPO=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          IMG_BASE="ghcr.io/${REPO}/${NAME}"
          VERSION_TAG=${{ github.ref_name#v }}
          
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t "${IMG_BASE}:${VERSION_TAG}" \
          -t "${IMG_BASE}:latest" \
          --push .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Stable Release ${{ github.ref_name }}
          body: "Official release for version **${{ github.ref_name }}**."
          prerelease: false # Marks it as a stable, "latest" release


  bump_version_on_main:
    needs: build_and_release
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: 'main'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next pre-release version
        id: calculate_version
        run: |
          # Get the stable tag that triggered the workflow
          BASE_TAG=${{ github.ref_name }}
          BASE_VERSION=${BASE_TAG#v}
          
          IFS=. read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          NEXT_PATCH=$((PATCH + 1))
          
          TIMESTAMP=$(date -u +%Y%m%d%H%M%S)
          
          NEXT_VERSION_STRING="$MAJOR.$MINOR.$NEXT_PATCH-pre-$TIMESTAMP"
          
          echo "NEXT_VERSION=$NEXT_VERSION_STRING" >> $GITHUB_ENV
          echo "Bumping version on main to: $NEXT_VERSION_STRING"

      - name: Update version in __init__.py
        run: |
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ env.NEXT_VERSION }}\"/" app-service/__init__.py
          echo "Updated content of app-service/__init__.py:"
          cat app-service/__init__.py

      - name: Commit and push new version
        run: |
          git add app-service/__init__.py
          if git diff --staged --quiet; then
            echo "No version change to commit."
          else
            git commit -m "chore: Bump version to ${{ env.NEXT_VERSION }} for next dev cycle"
            git push origin main
          fi